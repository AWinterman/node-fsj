#!/usr/bin/env node

var blobify = require('./')
var nopt = require('nopt')
var Fifo = require('fifo-stream')
var path = require('path')
var fs = require('fs')
var options

opts = {
    'links': Boolean
  , 'ignore': String
  , 'help': Boolean
  , 'file-transform': String
  , 'indent': Number
  , 'flat': Boolean
}

shorthands = {
    'l': ['--links']
  , 'i': ['--ignore']
  , 'h': ['--help']
  , 't': ['--file-transform']
  , 'd': ['--indent']
  , 'f': ['--flat']
}

var args = nopt(opts, shorthands, process.argv, 2)
var options = {}
var fifo = new Fifo(args.argv.remain)

for(var key in args) {
  if(key === 'argv') {
    continue
  }

  if(key === 'ignore') {
    options[key] = new RegExp(args[key])

    continue
  }

  options[key] = args[key]
}

if(options.help) {
  process.stderr.write(fs.readFileSync(path.join(__dirname, 'help.txt')))

  process.exit(1)
}

if(!args.argv.remain.length) {
  // then we need to do some magicking to get stdin
  process.stdin.setEncoding('utf8');

  var last_chunk

  process.stdin.on('data', function(data) {
    var str = data.toString()

    if(last_chunk) {
      str = last_chunk + str
    }

    var chunks = data.split(/\s+/)

    last_chunk = chunks.slice(-1)

    fifo.write(chunks.slice(0, -1))
  })

  process.stdin.on('end', function() {
    if(last_chunk) {
      fifo.write(last_chunk)
    }
  })
}

blobify(fifo, options, ready)

function ready(err, data) {
  if(err) {
    return on_error(err)
  }

  process.stdout.write(JSON.stringify(data, null, options.indent))
  process.exit(0)
}

function on_error(error) {
  process.stderr.write(error.toString())
  process.exit(1)
}
